apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: finops-dashboard-compositions-panel-table
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: allNamespacesAndCrds
    path: "/call?apiVersion=templates.krateo.io%2Fv1&resource=restactions&name=dashboard-compositions-get-ns-and-crd&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: allNamespacesAndCrdsError
    exportJwt: true
  - name: allCompositions
    dependsOn: 
      name: allNamespacesAndCrds
      iterator: ".allNamespacesAndCrds.status"
    path: ${ "/apis/composition.krateo.io/" + (.version) + "/namespaces/" + (.namespace) + "/" + (.plural) }
    verb: GET 
    continueOnError: true
    errorKey: allCompositionsError
    filter: .items
  - name: allCosts
    dependsOn: 
      name: allCompositions
      iterator: .allCompositions
    endpointRef:
      name: finops-database-handler-endpoint
      namespace: {{ .Release.Namespace }}
    path: "/compute/allcosts"
    verb: POST
    headers:
    - 'Accept: application/json'
    - 'Content-Type: application/json'
    payload: |
      ${ {composition_id: .metadata.uid, table_name: "{{ .Values.tableName }}", name: .metadata.name, namespace: .metadata.namespace, opt: ( 
                if .spec.optimization? then
                 ( .spec.optimization | fromjson | .[] | .optimization.resourceDelta | tostring )
                else
                 "Not available"
                end
              ) } }
    filter: >
      {
      cost: .billed_cost,
      key: .composition_id,
      opt: .opt,
      name: .name,
      namespace: .namespace
      }